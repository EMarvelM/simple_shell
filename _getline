#include "simple_shell.h"

#define READ_SIZE 1024

/**
 * my_getline - Custom implementation of getline.
 *
 * @fd: File descriptor to read from (usually STDIN_FILENO).
 *
 * Return: A dynamically allocated string containing the line read from the input.
 *         NULL is returned on error or end of input.
 */
char *my_getline(int fd)
{
    static char buffer[READ_SIZE];
    static int buffer_index = 0;
    static int buffer_size = 0;
    char *line = NULL;
    int line_index = 0;
    int read_result = 0;

    if (buffer_index >= buffer_size)
    {
        // Refill the buffer if it's empty
        buffer_size = read(fd, buffer, READ_SIZE);
        if (buffer_size <= 0)
            return NULL; // End of input or error
        buffer_index = 0;
    }

    // Allocate memory for the line dynamically
    line = malloc(READ_SIZE);
    if (!line)
        return NULL; // Allocation failed

    while (1)
    {
        if (buffer_index >= buffer_size)
        {
            // Refill the buffer if it's empty
            buffer_size = read(fd, buffer, READ_SIZE);
            if (buffer_size <= 0)
            {
                // End of input or error
                if (line_index == 0)
                {
                    free(line);
                    return NULL;
                }
                break;
            }
            buffer_index = 0;
        }

        if (buffer[buffer_index] == '\n')
        {
            // End of line
            line[line_index] = '\0';
            buffer_index++;
            break;
        }

        line[line_index] = buffer[buffer_index];
        line_index++;
        buffer_index++;
    }

    return line;
}